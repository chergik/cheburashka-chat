{
  "name": "asset-rack",
  "version": "2.2.2",
  "description": "Static Web Framework for Nodejs",
  "author": {
    "name": "Brad Carleton",
    "email": "brad@techpines.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/techpines/asset-rack"
  },
  "dependencies": {
    "browserify": "1.17.3",
    "snockets": "~1.3.8",
    "uglify-js": "~2.4.0",
    "async": "~0.2.9",
    "pkgcloud": "~0.8.12",
    "less": "~1.4.2",
    "jade": "~0.35.0",
    "mime": "1.2.11",
    "nib": "~1.0.1",
    "stylus": "~0.38.0",
    "underscore": "~1.5.2",
    "coffee-script": "~1.6.3",
    "markdown": "~0.5.0",
    "node-sassy": "~0.0.1"
  },
  "devDependencies": {
    "express.io": "1.1.8",
    "request": "2.12.0",
    "mocha": "1.8.1",
    "chai": "1.4.2"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test/test.coffee",
    "compile": "./node_modules/coffee-script/bin/coffee -o compiled/ -c lib/",
    "prepublish": "echo $(pwd) > /tmp/.pwd; ./node_modules/coffee-script/bin/coffee -o compiled/ -c lib/;",
    "postpublish": "rm -rf $(cat /tmp/.pwd)/compiled"
  },
  "main": "switch.js",
  "engines": {
    "node": ">= 0.5.0"
  },
  "readme": "<img src=\"https://s3.amazonaws.com/temp.techpines.com/asset-rack-white.png\">\n\n# The Static Web is here\n\nThe Static Web is __blisteringly fast__.  The Static Web is  __ultra efficient__.  The Static Web is __cutting edge__.  And now it has a hero.\n\n```coffeescript\nrack = require 'asset-rack'\n```\n\nThe Static Web is an incredibly modern, high-performance platform for delivering apps and services.  But before you dive-in, you need to start with the basics.  You need to understand the fundamental building block of the static web, the __asset__.\n\n\n## What is an Asset?\n\n> __An asset is a resource on the web that has the following three features:__\n\n1. __Location (URL)__: Where on the web the resource is located.\n2. __Contents (HTTP Response Body)__: The body of the response received by a web client.\n3. __Meta Data (HTTP Headers)__: Gives information about the resource, like content-type, caching info.\n\nThis simple definition is the theoretical bedrock of this entire framework.\n\n## Getting Started\n\nLet's look at a simple example.\n\n```js\nasset = new rack.Asset({\n    url: '/hello.txt',\n    contents: 'hello world'\n})\n```\n\nNeed to serve that asset with a blisteringly fast in memory cache using express?\n\n```\napp.use(asset)\n```\n\n### Hash for speed and efficiency\n\nWhat's cool is that this new asset is available both here:\n\n```\n/hello.txt\n```\n\nAnd here\n\n```\n/hello-5eb63bbbe01eeed093cb22bb8f5acdc3.txt\n```\n\nThat long string of letters and numbers is the md5 hash of the contents.  If you hit the hash url, then we automatically set the HTTP cache to __never expire__.  \n\nNow proxies, browsers, cloud storage, content delivery networks only need to download your asset one single time.  You have versioning, conflict resolution all in one simple mechanism.  You can update your entire entire app instantaneously.  Fast, efficient, static.\n\n### One Rack to rule them All\n\nAssets need to be managed.  Enter the Rack.  A Rack serializes your assets, allows you to deploy to the cloud, and reference urls and tags in your templates.\n\nSay you have a directory structure like this:\n\n```\n/static      # all your images, fonts, etc.\n/style.less  # a less files with your styles\n```\n\nYou can create a Rack to put all your assets in.\n\n```js\nassets = new rack.Rack([\n    new rack.StaticAssets({\n        urlPrefix: '/static',\n        dirname: __dirname + '/static'\n    }),\n    new rack.LessAsset({\n        url: '/style.css',\n        filename: __dirname + '/style.less'\n    })\n])\n```\n\n### Use in your Templates\n\nAfter you hook into express, you can reference your assets in your server side templates.\n\n```js\nassets.tag('/style.css')\n```\n\nWhich gives you the html tag.\n\n```html\n<link href=\"/style-0f2j9fj039fuw0e9f23.css\" rel=\"stylesheet\">\n```\n\nOr you can grab just the url.\n\n```js\nassets.url('/logo.png')\n```\n\nWhich gives the hashed url.\n\n```\n/logo-34t90j0re9g034o4f3o4f3.png\n```\n\n# Batteries Included\n\nWe have some professional grade assets included.\n\n#### For Javascript\n* [Browserify](https://github.com/techpines/asset-rack/tree/master/lib#browserifyasset-jscoffeescript) - Create browserify assets that allow you to use \"node-style\" requires on the client-side.\n* [Snockets](https://github.com/techpines/asset-rack/tree/master/lib#snocketsasset-jscoffeescript) - Create snockets assets, to get the node-flavor of the \"sprockets\" from rails.\n\n#### For Stylesheets\n* [Less](http://github.com/techpines/asset-rack/tree/master/lib#lessasset) - Compile less assets, ability to use dependencies, minification.\n* [Stylus](https://github.com/techpines/asset-rack/tree/master/lib#stylusasset) - Compile stylu assets, ability to use dependencies, minification.\n\n#### Templates\n* [Jade](https://github.com/techpines/asset-rack/tree/master/lib#jadeasset) - High, performance jade templates precompiled for the browser.\n* [AngularTemplates](https://github.com/techpines/asset-rack/tree/master/lib#angulartemplatesasset) - AngularJS templates for you AngularJS folks.\n\n#### Other\n* [StaticAssets](https://github.com/techpines/asset-rack/tree/master/lib#staticassets) - Images(png, jpg, gif), fonts, whatever you got.\n* [DynamicAssets](https://github.com/techpines/asset-rack/tree/master/lib#dynamicassets) - For compiling file-based assets like Less or Stylus in an entire directory.\n\n## Roll your own\n\nAsset Rack is extremely flexible.  Extend the __Asset__ class and override the __create__ method to roll your own awesomeness, and watch them get automatically ka-pow'ed by your rack.\n\n```js\nSuperCoolAsset = rack.Asset.extend({\n    create: function(options) {\n        this.contents = 'easy, easy',\n        this.emit 'created',\n    }\n})\n```\nOr, for those with more refined taste:\n\n```coffee\nclass SuperCoolAsset extends rack.Asset\n    create: (options) ->\n        @contents = 'even easier with coffee'\n        @emit 'created'\n```\n\nCheckout the [tutorial.](https://github.com/techpines/asset-rack/tree/master/lib#extending-the-asset-class)\n\n\n## Deploying to the Cloud\nYour assets need to be deployed! Here are the current providers that are supported.\n\n### Amazon S3\n\n```js\nassets.deploy({\n    provider: 'amazon',\n    container: 'some-bucket',\n    accessKey: 'aws-access-key',\n    secretKey: 'aws-secret-key',\n}, function(error) {})\n```\n\n### Rackspace Cloud Files\n```js\nassets.deploy(\n    provider: 'rackspace',\n    container: 'some-container',\n    username: 'rackspace-username',\n    apiKey: 'rackspace-api-key',\n}, function(error) {})\n```\n\n### Azure Storage\n```js\nassets.deploy(\n    provider: 'azure',\n    container: 'some-container',\n    storageAccount: 'test-storage-account',\n    storageAccessKey: 'test-storage-access-key'\n}, function(error) {})\n```\n\n### Running in Production Mode\n\nIf you provide the options `configFile` in your deploy options then a config file will be written:\n\n```js\nassets.deploy(\n    configFile: __dirname + '/rack.json',\n    provider: 'amazon',\n    container: ...\n)\n```\n\nThen you can create your assets from the file like this:\n\n```js\nassets = rack.fromConfigFile({\n    configFile: __dirname + '/rack.json',\n    hostname: 'cdn.example.com'\n});\napp.use(assets);\n```\n\nAnd now all of your server side templates will reference your CDN.  Also, if you do happen to hit one of your static urls on the server, then you will be redirected to the CDN.\n\n## FAQ\n\n#### __Why is this better than Connect-Assets?__\n\nThat's easy!\n\n* It works with node.js multi-process and cluster.\n* More built-in assets.\n* Un-opionated, connect-assets dictates your url structure AND directory structure.\n* Ability to deploy to the cloud.\n* Easy to extend.\n* Simpler to use.\n\nWith all that said, much thanks to Trevor for writing connect-assets. \n\n#### __Why is this better than Grunt?__\n\nGrunt is a great build tool.  Asset Rack is not a build a tool.  It never writes files to disk, there is no \"build step\".  Everything happens \"just in time\".\n\nIf you have \"genuine\" build issues, then by all means use Grunt.  You can even use Grunt with Asset Rack.\n\nHowever, if you are only using Grunt to manage your static assets, then you should consider upgrading to Asset Rack.\n\n#### __Why is this better than Wintersmith(Blacksmith)?__\n\nAsset Rack is a static web framework, and at it's core there are only two abstractions, the `Asset` and `Rack` classes.  Wintersmith is a high level framework that solves a more specific problem.\n\nWintersmith could consume Asset Rack as a dependency, and if something more high-level fits your specific use case, then by all means that is probably a good fit.  If you need more flexibilty and power, then go with Asset Rack.\n\n# Changelog\n\n### 2.2.1\n\n* A few small tweaks.\n\n### 2.2.0\n\n* Watch and asset recreation is now working.  This should be considered experimental for this version.\n\n```js\nnew StylusAsset({\n    watch: true,\n    ...\n});\n```\n\n* Gzip is here finally.\n\n```js\nnew BrowserifyAsset({\n    gzip: true,\n    ...\n});\n```\n\n* Now adding sub assets to an asset is much simpler, just use `addAsset`.\n\n```js\nthis.addAsset(asset);\nthis.emit('created');\n```\n\nThanks @moellenbeck, @d1plo1d, @undashes, and @noc7c9 for contributing!\n\n### 2.1.4\n\n* @vicapow Better error handling for `LessAsset`.\n\n### 2.1.3\n\n* @noc7c9 Added generalized `rack.util.walk` function, need to document the function.\n* @noc7c9 Added `DynamicAssets` class.\n* @noc7c9 is awesome.\n\n### 2.1.2\n\n* Added ability to configure Stylus, thanks to @noc7c9.\n\n```coffee\nnew StylusAsset\n  url: '/style.css'\n  filename: __dirname + '/style/fun.styl'\n  config: ->\n    @use bootstrap()\n    @define 'setting', 90\n```\n\nAnd for javascript:\n\n```js\nnew StylusAsset({\n  url: '/style.css',\n  filename: __dirname + '/style/fun.styl',\n  config: function (stylus) {\n    stylus // using \"this\" here seems a little unnatural\n      .use(bootstrap())\n      .define('setting', 90);\n  }\n});\n```\n\n# Test\n\nTesting is easy and fun!\n\n```js\ncd asset-rack\nnpm install\nnpm test\n```\n\n# License\n\n©2012 Brad Carleton, Tech Pines and available under the [MIT license](http://www.opensource.org/licenses/mit-license.php):\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/techpines/asset-rack/issues"
  },
  "_id": "asset-rack@2.2.2",
  "dist": {
    "shasum": "fc2836e98ce680725e2c7593404a9c15eb0b99a6",
    "tarball": "http://registry.npmjs.org/asset-rack/-/asset-rack-2.2.2.tgz"
  },
  "_from": "asset-rack@>=2.2.2 <3.0.0",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "brad@techpines.com",
    "email": "brad@techpines.com"
  },
  "maintainers": [
    {
      "name": "brad@techpines.com",
      "email": "brad@techpines.com"
    }
  ],
  "directories": {},
  "_shasum": "fc2836e98ce680725e2c7593404a9c15eb0b99a6",
  "_resolved": "https://registry.npmjs.org/asset-rack/-/asset-rack-2.2.2.tgz",
  "homepage": "https://github.com/techpines/asset-rack"
}
